{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","searchString","handleSearch","value","onChange","PersonForm","props","onSubmit","addNewData","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","searchState","persons","filter","person","name","toLowerCase","includes","map","key","id","phone","onClick","deleteContact","baseUrl","personObject","axios","post","delete","get","newData","put","Notification","message","className","App","useState","setPersons","setNewName","setNewNumber","setSearchString","setSearchState","notification","setNotification","useEffect","dbService","then","response","data","handleNotice","status","setTimeout","validateInput","find","p","event","target","trim","length","preventDefault","window","confirm","updatedPerson","catch","error","personObjectWithID","concat","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.096762a3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ( {searchString, handleSearch} ) => {\n    return (\n    <div>Search: <input value = {searchString} \n                        onChange = {handleSearch} />\n    </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n    <form onSubmit = {props.addNewData}>\n        <div>\n          Name: <input value = {props.newName} \n                       onChange = {props.handleNameChange} /><br />\n          Number: <input value = {props.newNumber} \n                         onChange = {props.handleNumberChange} />                                              \n        </div>\n        <div>\n          <button type=\"submit\">Add</button>\n        </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = (props) => {\n    let persons1 = [];\n\n    if (!props.searchState) {\n      persons1 = [...props.persons]  \n    } else {\n      persons1 = props.persons.filter(person => person.name.toLowerCase().includes(props.searchString.toLowerCase()))\n    }\n\n    return persons1.map(person => (\n      <div key = {person.name} id = {person.id}>\n        {person.name} : {person.phone} <button onClick={() => props.deleteContact(person.id)}>Delete</button>\n      </div>\n    ))\n  }\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = personObject => {\n    return axios.post(baseUrl, personObject)\n}\n\nconst deleteContact = id => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nconst update = (id, newData) => {\n    return axios.put(`${baseUrl}/${id}`, newData)\n}\n\nexport default { create, deleteContact, getAll, update }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    \n    if (message === null) {\n        return null\n    } else {\n        if (message[1]) {\n            return (\n                <div className=\"good\">\n                    {message}\n                </div>\n            )\n        } else {\n            return (\n                <div className=\"error\">\n                    {message}\n                </div>\n            )\n        }\n    }\n}\n\nexport default Notification;","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport dbService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchString, setSearchString ] = useState('')\n  const [ searchState, setSearchState ] = useState(false)\n  const [ notification, setNotification ] = useState(null)\n\n  useEffect(() => {\n    dbService.getAll()\n             .then(response => {setPersons(response.data)})\n  }, [])\n\n  const handleNotice = (message, status) => {\n    setNotification( [message, status] )\n    setTimeout(() => {\n      setNotification(null)\n    }, 5000)\n  }\n\n  const addNewData = event => {\n    event.preventDefault()\n    const person = validateInput()\n\n    if (!person) {\n\n      const personObject = {\n        name: newName,\n        phone: newNumber\n      } \n      \n      dbService.create(personObject)\n               .then(personObjectWithID => {\n                 setPersons(persons.concat(personObjectWithID.data))\n                 handleNotice(`Added ${newName}`, true)})\n               .catch(error => {\n                 console.log(error)\n                 handleNotice(error.response.data, false) \n               })\n    } else {\n      if ((window.confirm(`${newName} exists in the phonebook, replace the old number with a new one?`))) {\n        const updatedPerson = {...person, phone: newNumber}\n        dbService\n          .update(updatedPerson.id, updatedPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== updatedPerson.id ? person : response.data));\n            handleNotice(`Updated number for ${person.name}`, true)\n          })\n          .catch((error) => {\n            handleNotice(error.response.data, false)\n          })\n      }\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleDelete = id => {\n    var person = persons.find(p => id === p.id)\n\n    if (window.confirm(`Delete ${person.name}?`)) {\n      dbService\n        .deleteContact(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          handleNotice(`Deleted ${person.name}`, true)\n        })\n        .catch(() => {\n          setPersons(persons.filter(p => p.id !== person.id))\n          handleNotice(`${person.name} has already been deleted!`, false)\n        })\n  }}\n\n  const handleNameChange = event => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleSearch = event => {\n    if (event.target.value.trim().length > 0) {\n      setSearchState(true)\n    } else {\n      setSearchState(false)\n    }\n\n    setSearchString(event.target.value)\n  }\n\n  const validateInput = () => persons.find(\n    p => p.name.toLowerCase() === newName.toLowerCase()\n  )\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {notification} />\n      <Filter searchString = {searchString}\n              handleSearch = {handleSearch}\n      />\n      <h3>Add new data</h3>\n      <PersonForm addNewData = {addNewData}\n                  newName = {newName}\n                  newNumber = {newNumber}\n                  handleNameChange = {handleNameChange}\n                  handleNumberChange = {handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons searchState = {searchState}\n               persons = {persons}\n               searchString = {searchString}\n               deleteContact = {handleDelete}\n      />\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}